package com.hedera.balanceFileLogger;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.HashMap;

import com.hedera.configLoader.ConfigLoader;
import com.hedera.databaseUtilities.DatabaseUtilities;
import com.hedera.recordFileLogger.Entities;
import com.hederahashgraph.api.proto.java.AccountID;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.Marker;
import org.apache.logging.log4j.MarkerManager;


/**
 * This is a utility file to read back service record file generated by Hedera node
 */
public class BalanceFileHistoryLogger {

	private static final Logger log = LogManager.getLogger("recordStream-log");
	private static final Marker MARKER = MarkerManager.getMarker("SERVICE_RECORD");
	static final Marker LOGM_EXCEPTION = MarkerManager.getMarker("EXCEPTION");

    private static Connection connect = null;
    private static ConfigLoader configLoader = new ConfigLoader("./config/config.json");
	private static HashMap<String, Long> mapEntities = new HashMap<String, Long>();

    enum balance_fields {
        ZERO
        ,FK_ENTITY_ID
        ,SNAPSHOT_TIME
        ,SECONDS
        ,BALANCE_INSERT 
        ,BALANCE_UPDATE        
    }
	static void moveFileToParsedDir(String fileName) {
		File sourceFile = new File(fileName);
		File parsedDir = new File(sourceFile.getParentFile().getParentFile().getPath() + "/parsedRecordFiles/");
		parsedDir.mkdirs();
		File destFile = new File(parsedDir.getPath() + "/" + sourceFile.getName());
		try {
			Files.move(sourceFile.toPath(), destFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
			log.info(MARKER, sourceFile.toPath() + " has been moved to " + destFile.getPath());
		} catch (IOException ex) {
			log.error(MARKER, "Fail to move {} to {} : {}",
					fileName, parsedDir.getName(),
					ex.getStackTrace());
		}
	}
	
	public static boolean processFile(File balanceFile) {
        boolean processLine = false;
        boolean getDate = false;
        Entities entities;
        
        try {
            // process the file
            connect = DatabaseUtilities.openDatabase(connect);
            
            if (connect != null) {

                try {
        			entities = new Entities(connect);
        		} catch (SQLException e) {
                    log.error(LOGM_EXCEPTION, "Unable to fetch entity types, Exception: {}", e.getMessage());
                	return false;
        		}

                try {
        			connect.setAutoCommit(false);
        		} catch (SQLException e) {
                    log.error(LOGM_EXCEPTION, "Unable to unset database auto commit, Exception: {}", e.getMessage());
                	return false;
        		}
                
            	PreparedStatement insertBalance;
	            insertBalance = connect.prepareStatement(
	                    "insert into t_account_balance_history (fk_entity_id, snapshot_time, seconds, balance) "
	                    + " values ("
	                    + " ?" // entity_id
	                    + ", to_timestamp(?, 'YYYY,MONTH,DD,hh24,mi,ss')" // snapsho
	                    + ", EXTRACT(EPOCH FROM to_timestamp(?, 'YYYY,MONTH,DD,hh24,mi,ss'))" //seconds
	                    + ", ?"
	                    + ")"
	                    + " ON CONFLICT (snapshot_time, seconds, fk_entity_id) "
	                    + " DO UPDATE set balance = ?");
	        
	            BufferedReader br = new BufferedReader(new FileReader(balanceFile));
	
	            String line;
	            String dateLine = "";
	            while ((line = br.readLine()) != null) {
	                if (processLine) {
	                    try {
	                        String[] balanceLine = line.split(",");
	                        if (balanceLine.length != 4) {
		                        log.error(LOGM_EXCEPTION, "Balance file {} appears truncated", balanceFile);
		                        connect.rollback();
		                        insertBalance.close();
		                        br.close();
		                        return false;
	                        } else {
	                        	// get entity id
	                        	AccountID.Builder accountId = AccountID.newBuilder();
	                        	accountId.setShardNum(Long.valueOf(balanceLine[0]));
	                        	accountId.setRealmNum(Long.valueOf(balanceLine[1]));
	                        	accountId.setAccountNum(Long.valueOf(balanceLine[2]));

	                        	long entityId = 0;
	                        	String entitySRN = balanceLine[0] + "." + balanceLine[1] + "." + balanceLine[2];
	                        	if (mapEntities.containsKey(entitySRN)) {
	                        		entityId = mapEntities.get(entitySRN);
	                        	} else {
	                        		entityId = entities.createOrGetEntity(accountId.build());
	                        		mapEntities.put(entitySRN, entityId);
	                        	}

	                        	insertBalance.setLong(balance_fields.FK_ENTITY_ID.ordinal(), entityId);
	                        	
		                        insertBalance.setString(balance_fields.SNAPSHOT_TIME.ordinal(), dateLine);
		                        insertBalance.setString(balance_fields.SECONDS.ordinal(), dateLine);
		                        insertBalance.setLong(balance_fields.BALANCE_INSERT.ordinal(), Long.valueOf(balanceLine[3]));
		                        insertBalance.setLong(balance_fields.BALANCE_UPDATE.ordinal(), Long.valueOf(balanceLine[3]));
		
		                        insertBalance.execute();
	                        }	                        
	                    } catch (SQLException e) {
	                        log.error(LOGM_EXCEPTION, "Exception {}", e);
	                        connect.rollback();
	                        return false;
	                    }
	                } else if (getDate) {
	                    getDate = false;
	                    dateLine = line;
	                } else if (line.contentEquals("year,month,day,hour,minute,second")) {
	                    getDate = true;
	                } else if (line.contentEquals("shard,realm,number,balance")) {
	                    // skip all lines until shard,realm,number,balance
	                    processLine = true;
	                }
	            }
	            connect.commit();
	            insertBalance.close();
	            br.close();
	            return true;
            }
        } catch (FileNotFoundException e) {
            log.error(LOGM_EXCEPTION, "Exception {}", e);
        } catch (IOException e) {
            log.error(LOGM_EXCEPTION, "Exception {}", e);
        } catch (SQLException e) {
            log.error(LOGM_EXCEPTION, "Exception {}", e);
        }
        return false;
	}
	public static void main(String[] args) {

		String balanceFolder = configLoader.getDownloadToDir();
		if (!balanceFolder.endsWith("/")) {
			balanceFolder += "/";
		}
	    File balanceFilesPath = new File(balanceFolder + "accountBalances/balance");
        String balanceFilePath = "";
        String donePath = "";
        try {
        
            for (final File nodeFolders : balanceFilesPath.listFiles()) {
                donePath = nodeFolders.getCanonicalPath().toString().replace("/balance", "/processed");
                File targetPath = new File (donePath);
                targetPath.mkdirs();
                if (nodeFolders.isDirectory()) {
                    for (final File balanceFile : nodeFolders.listFiles()) {
                        if (processFile(balanceFile)) {
                            // move it
                            File destFile = new File(targetPath.getCanonicalPath() + File.separator + balanceFile.getName());

                            Files.move(balanceFile.toPath(), destFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
                            log.info(MARKER, balanceFile.toPath() + " has been moved to " + destFile.getPath());
                            balanceFilePath = balanceFile.getCanonicalFile().toString();
                        }
                    }
                }
            } 
        } catch (IOException ex) {
            log.error(MARKER, "Fail to move {} to {} : {}",balanceFilePath, donePath, ex.getStackTrace());
        }
        log.info(MARKER, "Balance History processing done");
	}
}
