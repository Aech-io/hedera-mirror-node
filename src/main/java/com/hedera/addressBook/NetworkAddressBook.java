package com.hedera.addressBook;

/*-
 * ‌
 * Hedera Mirror Node
 * ​
 * Copyright (C) 2019 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import com.hedera.configLoader.ConfigLoader;
import lombok.extern.log4j.Log4j2;

import com.hedera.hashgraph.sdk.Client;
import com.hedera.hashgraph.sdk.HederaException;
import com.hedera.hashgraph.sdk.HederaNetworkException;
import com.hedera.hashgraph.sdk.account.AccountId;
import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;
import com.hedera.hashgraph.sdk.file.FileId;
import com.hederahashgraph.api.proto.java.NodeAddressBook;

import io.github.cdimascio.dotenv.Dotenv;

import com.hedera.hashgraph.sdk.file.FileContentsQuery;

import java.io.FileOutputStream;

/**
 * This is a utility file to read back service record file generated by Hedera node
 */
@Log4j2
public class NetworkAddressBook {

	private static String addressBookFile = ConfigLoader.getAddressBookFile();

	static Client client;
	static Dotenv dotenv = Dotenv.configure().ignoreIfMissing().load();
    static byte[] addressBookBytes = new byte[0];
    
    public static void main(String[] args) {

        var client = createHederaClient();

		log.info("Fetching new address book from node {}", dotenv.get("NODE_ADDRESS"));
        
        try {
            var contents = new FileContentsQuery(client)
                    .setFileId(new FileId(0, 0, 102))
                    .execute();

            update(contents.getFileContents().getContents().toByteArray());
        } catch (FileNotFoundException e) {
    		log.error("Address book file {} not found.", addressBookFile);
        } catch (IOException e) {
    		log.error("An error occurred fetching the address book file: {} ", e);
        } catch (HederaNetworkException e) {
    		log.error("An error occurred fetching the address book file: {} ", e);
		} catch (HederaException e) {
    		log.error("An error occurred fetching the address book file: {} ", e);
		}
	}

    public static void update(byte[] newContents) throws IOException {
    	addressBookBytes = newContents;
		savetoDisk();
    }

    public static void append(byte[] extraContents) throws IOException {
    	byte[] newAddressBook = Arrays.copyOf(addressBookBytes, addressBookBytes.length + extraContents.length);
    	System.arraycopy(extraContents, 0, newAddressBook, addressBookBytes.length, extraContents.length);
    	addressBookBytes = newAddressBook;
		savetoDisk();
    }

    private static void savetoDisk() throws IOException {
        FileOutputStream fos = new FileOutputStream(addressBookFile);
        fos.write(addressBookBytes);
        fos.close();
		log.info("New address book successfully saved to {}", addressBookFile);
    }
    
	private static Client createHederaClient() {
	    // To connect to a network with more nodes, add additional entries to the network map
		
	    var nodeAddress = dotenv.get("NODE_ADDRESS","");
	    if (nodeAddress.isEmpty()) {
    		log.error( "NODE_ADDRESS environment variable not set");
    		System.exit(1);
	    }
	    var client = new Client(Map.of(getNodeId(), nodeAddress));
	
	    // Defaults the operator account ID and key such that all generated transactions will be paid for
	    // by this account and be signed by this key
	    client.setOperator(getOperatorId(), getOperatorKey());
	
	    return client;
	}
	
    public static AccountId getNodeId() {
    	try {
    		return AccountId.fromString(dotenv.get("NODE_ID"));
    	} catch (Exception e) {
    		log.error("NODE_ID environment variable not set");
    		System.exit(1);
    	}
    	return null;
    }

    public static AccountId getOperatorId() {
    	try {
    		return AccountId.fromString(dotenv.get("OPERATOR_ID"));
    	} catch (Exception e) {
    		log.error("OPERATOR_ID environment variable not set");
    		System.exit(1);
    	}
    	return null;
    	
    }
	
    public static Ed25519PrivateKey getOperatorKey() {
    	try {
    		return Ed25519PrivateKey.fromString(dotenv.get("OPERATOR_KEY"));
		} catch (Exception e) {
			log.error("OPERATOR_KEY environment variable not set");
			System.exit(1);
		}
		return null;
	    }
	
}


